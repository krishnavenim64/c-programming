typedef struct HashNode{
    int val;
    struct HashNode *next;
} MyHashSet;

MyHashSet* myHashSetCreate() {
    MyHashSet *node = (MyHashSet *) malloc(sizeof(MyHashSet));
    node->val = -1; // init node value
    node->next = 0; // init node pointer

    return node;
}

void myHashSetAdd(MyHashSet* obj, int key) {
    MyHashSet *prev = obj;
    MyHashSet *curr = obj;
    
    /* Check key value exist or not */
    while (curr) {
        if (curr->val == key)
            return;
        prev = curr;
        curr = curr->next;
    }

    /* Insert node to hash set */
    MyHashSet *node = myHashSetCreate();
    node->val = key;
    node->next = 0;
    prev->next = node;
}

void myHashSetRemove(MyHashSet* obj, int key) {
    MyHashSet *prev = 0;
    MyHashSet *curr = obj;
    
    /* Check key value exist or not, remove it if exists */
    while (curr) {
        if (curr->val == key) {
            MyHashSet *tmp = curr;
            curr = curr->next;
            if (prev)
                prev->next = curr;
            tmp->next = 0;
            free(tmp);
            
            return;
        }
        
        prev = curr;
        curr = curr->next;
    }
}

bool myHashSetContains(MyHashSet* obj, int key) {
    MyHashSet *curr = obj;

    while (curr) {
        if (curr->val == key)
            return true;
        curr = curr->next;
    }

    return false;
}

void myHashSetFree(MyHashSet* obj) {
    free(obj);
}

/**
 * Your MyHashSet struct will be instantiated and called as such:
 * MyHashSet* obj = myHashSetCreate();
 * myHashSetAdd(obj, key);
 
 * myHashSetRemove(obj, key);
 
 * bool param_3 = myHashSetContains(obj, key);
 
 * myHashSetFree(obj);
*/
